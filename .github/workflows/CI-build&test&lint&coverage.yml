name: CI-build&test&lint&coverage

run-name: "Workflow performing all CI steps: build, unit tests, integration tests, linting, coverage"

on:
  pull_request:
    types: [opened]
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1

jobs:
  build-test-lint-coverage:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
      - name: Print All Environment Variables
        run: env
      - name: Build (release)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: cargo build --release --all-features
      - name: Build (debug)
        if: github.event_name != 'push' || github.ref != 'refs/heads/main'
        run: cargo build --all-features
      - name: Set up cargo cache
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Unit tests
        run: cargo test --lib --bins --no-fail-fast
      - name: Integration tests
        run: cargo test --test '*' --no-fail-fast
      - name: Linting
        run: cargo clippy
      - name: Coverage
        uses: actions-rs/tarpaulin@v0.1
        with:
          version: '0.22.0'
          # version: '0.15.0' # OK
          # version: 'latest' # KO
          out-type: 'Stdout'
          args: '--ignore-tests'

      - name: Get sha
        run: |
          echo "GITHUB_REF_NAME is ${{ env.GITHUB_REF_NAME }}"
          env
          echo "GITHUB_REF_NAME (again) is ${{ env.GITHUB_REF_NAME }}"

          BRANCH_NAME=${{ github.head_ref || github.ref_name }}
          echo BRANCH_NAME is ${BRANCH_NAME}

          echo "github.ref_name is ${{ github.ref_name }}"
          echo "github.ref is ${{ github.ref }}"
          SHA=$(curl -s "https://api.github.com/repos/JackPiri/minigrep/pulls?state=open" | jq ".[] | select(.head.label == \"JackPiri:${BRANCH_NAME}\")" | jq ".head.sha")
          echo SHA is ${SHA}
          SHA="${SHA:1:-1}"
          echo SHA is ${SHA}
          echo "SHA=${SHA}" >> $GITHUB_ENV
      - name: Check sha
        run: |
          echo ${SHA}
          echo ${{ env.SHA }}

      - name: Set latest commit status (no 3rd party action)
        run: |
          echo c0 ${{ env.CONTEXT}}
          echo c1 ${{ env.context}}
          echo c2 ${context}
          echo c3 ${CONTEXT}
          echo c4 ${{ job.CONTEXT}}
          echo c5 ${{ job.context}}
          echo c6 ${{ github.CONTEXT}}
          echo c7 ${{ github.context}}
          
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/JackPiri/minigrep/statuses/${SHA} \
          -d '{"state":"success","context":"CI-build&test&lint&coverage"}'


      # - name: Set latest commit status
      #   uses: myrotvorets/set-commit-status-action@master
      #   if: env.SHA != '' # if workflow fails this is not triggered
      #   with:
      #     # sha: $SHA
      #     sha: ${{ env.SHA }}
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     status: ${{ job.status }}